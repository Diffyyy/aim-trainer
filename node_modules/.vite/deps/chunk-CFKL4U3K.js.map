{
  "version": 3,
  "sources": ["browser-external:stream", "../../@serialport/parser-delimiter/dist/index.js", "../../@serialport/parser-readline/dist/index.js"],
  "sourcesContent": ["module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"stream\" has been externalized for browser compatibility. Cannot access \"stream.${key}\" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DelimiterParser = void 0;\nconst stream_1 = require(\"stream\");\n/**\n * A transform stream that emits data each time a byte sequence is received.\n * @extends Transform\n *\n * To use the `Delimiter` parser, provide a delimiter as a string, buffer, or array of bytes. Runs in O(n) time.\n */\nclass DelimiterParser extends stream_1.Transform {\n    includeDelimiter;\n    delimiter;\n    buffer;\n    constructor({ delimiter, includeDelimiter = false, ...options }) {\n        super(options);\n        if (delimiter === undefined) {\n            throw new TypeError('\"delimiter\" is not a bufferable object');\n        }\n        if (delimiter.length === 0) {\n            throw new TypeError('\"delimiter\" has a 0 or undefined length');\n        }\n        this.includeDelimiter = includeDelimiter;\n        this.delimiter = Buffer.from(delimiter);\n        this.buffer = Buffer.alloc(0);\n    }\n    _transform(chunk, encoding, cb) {\n        let data = Buffer.concat([this.buffer, chunk]);\n        let position;\n        while ((position = data.indexOf(this.delimiter)) !== -1) {\n            this.push(data.slice(0, position + (this.includeDelimiter ? this.delimiter.length : 0)));\n            data = data.slice(position + this.delimiter.length);\n        }\n        this.buffer = data;\n        cb();\n    }\n    _flush(cb) {\n        this.push(this.buffer);\n        this.buffer = Buffer.alloc(0);\n        cb();\n    }\n}\nexports.DelimiterParser = DelimiterParser;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ReadlineParser = void 0;\nconst parser_delimiter_1 = require(\"@serialport/parser-delimiter\");\n/**\n *  A transform stream that emits data after a newline delimiter is received.\n * @summary To use the `Readline` parser, provide a delimiter (defaults to `\\n`). Data is emitted as string controllable by the `encoding` option (defaults to `utf8`).\n */\nclass ReadlineParser extends parser_delimiter_1.DelimiterParser {\n    constructor(options) {\n        const opts = {\n            delimiter: Buffer.from('\\n', 'utf8'),\n            encoding: 'utf8',\n            ...options,\n        };\n        if (typeof opts.delimiter === 'string') {\n            opts.delimiter = Buffer.from(opts.delimiter, opts.encoding);\n        }\n        super(opts);\n    }\n}\nexports.ReadlineParser = ReadlineParser;\n"],
  "mappings": ";;;;;;AAAA;AAAA;AAAA,WAAO,UAAU,OAAO,OAAO,IAAI,MAAM,CAAC,GAAG;AAAA,MAC3C,IAAI,GAAG,KAAK;AACV,YACE,QAAQ,gBACR,QAAQ,eACR,QAAQ,iBACR,QAAQ,UACR;AACA,kBAAQ,KAAK,0FAA0F,GAAG,qIAAqI;AAAA,QACjP;AAAA,MACF;AAAA,IACF,CAAC,CAAC;AAAA;AAAA;;;ACXF;AAAA;AAAA;AACA,WAAO,eAAe,SAAS,cAAc,EAAE,OAAO,KAAK,CAAC;AAC5D,YAAQ,kBAAkB;AAC1B,QAAM,WAAW;AAOjB,QAAM,kBAAN,cAA8B,SAAS,UAAU;AAAA,MAI7C,YAAY,EAAE,WAAW,mBAAmB,OAAO,GAAG,QAAQ,GAAG;AAC7D,cAAM,OAAO;AAJjB;AACA;AACA;AAGI,YAAI,cAAc,QAAW;AACzB,gBAAM,IAAI,UAAU,wCAAwC;AAAA,QAChE;AACA,YAAI,UAAU,WAAW,GAAG;AACxB,gBAAM,IAAI,UAAU,yCAAyC;AAAA,QACjE;AACA,aAAK,mBAAmB;AACxB,aAAK,YAAY,OAAO,KAAK,SAAS;AACtC,aAAK,SAAS,OAAO,MAAM,CAAC;AAAA,MAChC;AAAA,MACA,WAAW,OAAO,UAAU,IAAI;AAC5B,YAAI,OAAO,OAAO,OAAO,CAAC,KAAK,QAAQ,KAAK,CAAC;AAC7C,YAAI;AACJ,gBAAQ,WAAW,KAAK,QAAQ,KAAK,SAAS,OAAO,IAAI;AACrD,eAAK,KAAK,KAAK,MAAM,GAAG,YAAY,KAAK,mBAAmB,KAAK,UAAU,SAAS,EAAE,CAAC;AACvF,iBAAO,KAAK,MAAM,WAAW,KAAK,UAAU,MAAM;AAAA,QACtD;AACA,aAAK,SAAS;AACd,WAAG;AAAA,MACP;AAAA,MACA,OAAO,IAAI;AACP,aAAK,KAAK,KAAK,MAAM;AACrB,aAAK,SAAS,OAAO,MAAM,CAAC;AAC5B,WAAG;AAAA,MACP;AAAA,IACJ;AACA,YAAQ,kBAAkB;AAAA;AAAA;;;AC1C1B,IAAAA,gBAAA;AAAA;AACA,WAAO,eAAe,SAAS,cAAc,EAAE,OAAO,KAAK,CAAC;AAC5D,YAAQ,iBAAiB;AACzB,QAAM,qBAAqB;AAK3B,QAAM,iBAAN,cAA6B,mBAAmB,gBAAgB;AAAA,MAC5D,YAAY,SAAS;AACjB,cAAM,OAAO;AAAA,UACT,WAAW,OAAO,KAAK,MAAM,MAAM;AAAA,UACnC,UAAU;AAAA,UACV,GAAG;AAAA,QACP;AACA,YAAI,OAAO,KAAK,cAAc,UAAU;AACpC,eAAK,YAAY,OAAO,KAAK,KAAK,WAAW,KAAK,QAAQ;AAAA,QAC9D;AACA,cAAM,IAAI;AAAA,MACd;AAAA,IACJ;AACA,YAAQ,iBAAiB;AAAA;AAAA;",
  "names": ["require_dist"]
}
