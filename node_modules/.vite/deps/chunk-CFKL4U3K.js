import {
  __commonJS,
  __publicField
} from "./chunk-NEAGQJHQ.js";

// browser-external:stream
var require_stream = __commonJS({
  "browser-external:stream"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "stream" has been externalized for browser compatibility. Cannot access "stream.${key}" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/@serialport/parser-delimiter/dist/index.js
var require_dist = __commonJS({
  "node_modules/@serialport/parser-delimiter/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DelimiterParser = void 0;
    var stream_1 = require_stream();
    var DelimiterParser = class extends stream_1.Transform {
      constructor({ delimiter, includeDelimiter = false, ...options }) {
        super(options);
        __publicField(this, "includeDelimiter");
        __publicField(this, "delimiter");
        __publicField(this, "buffer");
        if (delimiter === void 0) {
          throw new TypeError('"delimiter" is not a bufferable object');
        }
        if (delimiter.length === 0) {
          throw new TypeError('"delimiter" has a 0 or undefined length');
        }
        this.includeDelimiter = includeDelimiter;
        this.delimiter = Buffer.from(delimiter);
        this.buffer = Buffer.alloc(0);
      }
      _transform(chunk, encoding, cb) {
        let data = Buffer.concat([this.buffer, chunk]);
        let position;
        while ((position = data.indexOf(this.delimiter)) !== -1) {
          this.push(data.slice(0, position + (this.includeDelimiter ? this.delimiter.length : 0)));
          data = data.slice(position + this.delimiter.length);
        }
        this.buffer = data;
        cb();
      }
      _flush(cb) {
        this.push(this.buffer);
        this.buffer = Buffer.alloc(0);
        cb();
      }
    };
    exports.DelimiterParser = DelimiterParser;
  }
});

// node_modules/@serialport/parser-readline/dist/index.js
var require_dist2 = __commonJS({
  "node_modules/@serialport/parser-readline/dist/index.js"(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ReadlineParser = void 0;
    var parser_delimiter_1 = require_dist();
    var ReadlineParser = class extends parser_delimiter_1.DelimiterParser {
      constructor(options) {
        const opts = {
          delimiter: Buffer.from("\n", "utf8"),
          encoding: "utf8",
          ...options
        };
        if (typeof opts.delimiter === "string") {
          opts.delimiter = Buffer.from(opts.delimiter, opts.encoding);
        }
        super(opts);
      }
    };
    exports.ReadlineParser = ReadlineParser;
  }
});

export {
  require_stream,
  require_dist,
  require_dist2
};
//# sourceMappingURL=chunk-CFKL4U3K.js.map
